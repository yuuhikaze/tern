export enum FocusCandidate {
    add-button,
    conversion-engine-combo-box,
    source-path-field,
    source-file-extension-field,
    output-path-field,
    output-file-extension-field,
    options-text-area,
    ignore-patterns-text-area,
    store-button
}

export global Backend {
    in-out property <int> focus-candidate-index: -1;
    out property <[FocusCandidate]> focus-candidate-list: [
        FocusCandidate.add-button,
        FocusCandidate.conversion-engine-combo-box,
        FocusCandidate.source-path-field,
        FocusCandidate.source-file-extension-field,
        FocusCandidate.output-path-field,
        FocusCandidate.output-file-extension-field,
        FocusCandidate.options-text-area,
        FocusCandidate.ignore-patterns-text-area,
        FocusCandidate.store-button
    ];

    out property <FocusCandidate> focus-candidate;
    public function update-focus-candidate(i: int) {
        focus-candidate-index += i;
        if (focus-candidate-index == focus-candidate-list.length) {
            focus-candidate-index = 0;
        } else if (focus-candidate-index == -1) {
            focus-candidate-index = focus-candidate-list.length - 1;
        }
        focus-candidate = focus-candidate-list[focus-candidate-index];
    }

    in property <bool> clear-signal;
    in property <bool> store-signal;

    in property <bool> rpanel-interactable;
    in property <[string]> available-engines: [];
    in property <[string]> stored-engines: [];

    in property <string> engine;
    in property <string> source-path;
    in property <string> source-file-extension;
    in property <string> output-path;
    in property <string> output-file-extension;
    in property <string> options;
    in property <string> ignore-patterns;

    pure callback store-profile();
    pure callback set_focus_candidate(FocusCandidate);
}
